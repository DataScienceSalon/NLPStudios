% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Pipeline.R
\docType{class}
\name{Pipeline}
\alias{Pipeline}
\title{Pipeline}
\format{An object of class \code{R6ClassGenerator} of length 24.}
\usage{
Pipeline
}
\arguments{
\item{name}{A character string containing the name of the Pipeline object.}

\item{path}{A chararacter string containing the relative path to the pipeline files.}

\item{dataExternal}{A FileCollection object, containing external data sources}

\item{dataRaw}{File Collection object containing raw data}

\item{dataPrepared}{File Collection object containing prepared data}

\item{dataCvCorpora}{List of cross-validation Corpus objects}

\item{dataProcessed}{Processed training Corpus object}

\item{featureNGram}{List of NGram Feature objects}

\item{featurePOS}{Part-of-speech tagged Feature object}

\item{analysis}{List of Analysis objects}

\item{model}{Model object}

\item{evaluation}{Model Evaluation object}
}
\description{
\code{Pipeline} Class containing the NLP processing, analysis, and modeling pipeline.
}
\section{Pipeline Family of Classes Overview}{

The Pipeline family of classes is an implementation of the builder design pattern,
as described in the book "Design Patterns: Elements of Reusable
Object-Oriented Software" by Erich Gamma, Richard Helm, Ralph Johnson
and John Vlissides (hence Gang of Four). This builder pattern accommodates
the creation of different pipeline representations via separate
builder classes.#'

\strong{Pipeline Family of Classes Participants:}
The Pipeline Family of classes is comprised of:
\itemize{
 \item Pipeline: This class comprising the 'product' class within the family.
 \item PipelineBuilder0: Abstact class, defining the base operations and interface for the concrete builder classes.
 \item PipelineBuilderWebSourceMKN: Concrete builder class for web source corpora and the Modified Kneser Ney language model.
 \item PipelineBuilderWebSourceKFoldMKN: Concrete builder class for web source corpora, using K-Fold validation and the Modified Kneser Ney language model.
 \item PipelineBuilderWebSourceKatz: Concrete builder class for web source corpora and the Katz back-off language model.
 \item PipelineBuilderWebSourceKFoldKatz: Concrete builder class for web source corpora, using K-Fold validation and the Katz back-off language model.
 \item PipelineDirector: Constructs the Pipeline object using a concrete builder class.
}

\strong{Pipeline Methods:}
 \describe{
  \item{\code{new(...)}}{Creates an object of Pipeline Class}
  \item{\code{getName()}}{Returns the name of the Pipeline object.}
  \item{\code{getPath()}}{Returns the path of the Pipeline object.}
  \item{\code{getDataExternal()}}{Returns the dataExternal object. }
  \item{\code{getDataRaw()}}{Returns the dataRaw object. }
  \item{\code{getDataPrepared()}}{Returns the dataPrepared object. }
  \item{\code{getDataCvCorprea()}}{Returns the dataCvCorprea object. }
  \item{\code{getDataProcessed()}}{Returns the dataProcessed object. }
  \item{\code{getFeatureNGram()}}{Returns the featureNGram object. }
  \item{\code{getFeaturePOS()}}{Returns the featurePOS object. }
  \item{\code{getAnalysis()}}{Returns the analysis object. }
  \item{\code{getModel()}}{Returns the model object. }
  \item{\code{getEvaluation()}}{Returns the evaluation object. }
  \item{\code{accept(visitor)}}{Accepts an object of the Visitor family of classes.}
  \item{\code{logIt(level = 'Info', fieldName = NA)}}{Formats the log and calls the LogR class to log an event.}
}
}

\author{
John James, \email{jjames@datasciencesalon.org}
}
\keyword{datasets}
